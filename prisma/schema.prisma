// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  name String?
  mname String?
  lname String?
  gender  String?
  Birthdate  DateTime?
  PhoneNum  String?
  Address  String?
  email String? @unique
  emailVerified DateTime?
  image String?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts Account[]
  booking Booking[]
  feedback Feedback[]
  

}

model Account {
  id Int @id @default(autoincrement())
  userId Int
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.Text
  access_token String? @db.Text
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.Text
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Spa {
  id Int @id @default(autoincrement())
  name String?
  address String?
  username String? @unique
  password String?
  email String? @unique
  phoneNum String?
  gcashname String?
  desc String?
  image String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  bookings Booking[]
  therapists Therapist[]
  feedback Feedback[]
}

model Massage {
  id Int @id @default(autoincrement())
  type String?
  duration Int
  price Decimal @db.Decimal(10, 2)
  bookings Booking[]
}

model Booking {
  id Int @id @default(autoincrement())
  massageId Int
  massage Massage @relation(fields: [massageId], references: [id])
  spaId Int
  spa Spa @relation(fields: [spaId], references: [id])
  userId Int
  user User @relation(fields: [userId], references: [id])
  address String?
  status Int @default(0)
  bookingStatus BookingStatus @relation(fields: [status], references: [id])
  therapistId Int?
  therapist Therapist? @relation(fields: [therapistId], references: [id])
  
}
model BookingStatus {
  id Int @id 
  status String?
  bookings Booking[]
}

model Therapist {
  id Int @id @default(autoincrement())
  spaId Int
  spa Spa @relation(fields: [spaId], references: [id])
  fname String?
  mname String?
  lname String?
  gender String?
  address String?
  status Int
  therapistStatus therapistStatus @relation(fields: [status], references: [id])
  updatedAt DateTime @db.Timestamp
  bookings Booking[]
}

model therapistStatus {
  id Int @id
  status String?
  therapist Therapist[]
}

model Feedback {
  id Int @id @default(autoincrement())
  userId Int
  user User @relation(fields: [userId], references: [id])
  spaId Int
  spa Spa @relation(fields: [spaId], references: [id])
  feedback String?
  createdAt DateTime @default(now())
  updatedAt DateTime? @db.Timestamp
}
